あなたはフロントエンドエンジニア兼ビルドスクリプト作者です。以下の要件を満たす静的サイトと、画像群からindex.htmlを自動生成する簡易スクリプトを作成してください。フレームワークは使わず（React/Vue等なし）、プレーンなHTML/CSS/JavaScriptのみで実装します。外部CDNやビルドツールも不要です。最終成果物はGitHubにそのままアップロードすればGitHub Pagesで公開できる構成にしてください。

目的

ローカルの写真フォルダ E:\zenryukyo にある写真をWebギャラリーとして公開する。

サイトの仕組みはシンプルにし、静的ファイルのみで完結させる。

GitHubにアップロードするだけで動く。

デザイン要件

左上にロゴを配置（画像は E:\Download\rogo.webp）。ロゴをクリックすると https://jpn-travel.com/ に遷移。

中央上部にタイトルを表示：「2025年 全国物流ネットワーク協会 板橋グループ様 研修会お写真」

写真プレビューは1行3枚のグリッド（PC）。タブレットは2列、スマホは1列にレスポンシブ対応。

下にスクロールして写真を見られる縦長レイアウト。画像はloading="lazy"で遅延読み込み。

写真クリックで拡大表示（ライトボックス）。ESCまたは背景クリックで閉じる。左右キーで前後移動も可能だと尚良い（任意）。

技術要件（厳守）

依存ライブラリなし（jQuery等も不使用）。

画像の相対パスで動作（GitHub Pages対応）。

CSSはモジュール分割不要、styles.css1枚でOK。ダークモード対応は任意。

アクセシビリティ配慮：altテキスト、フォーカス時のアウトライン、ライトボックスのフォーカストラップ、aria-hidden切替。

パフォーマンス：<img>はloading="lazy"とdecoding="async"、可能ならwidth/height属性を指定。CSSでobject-fit: cover。

生成してほしいファイル構成
/ (リポジトリ直下)
├─ index.html
├─ styles.css
├─ app.js
├─ /assets
│   └─ rogo.webp        ← ロゴ（ローカル E:\Download\rogo.webp からコピー）
├─ /photos              ← 写真（ローカル E:\zenryukyo から拡張子 jpg/jpeg/png/webp）
├─ /tools
│   └─ build_gallery.(js or py)  ← 自動生成スクリプト（どちらか1言語でOK）
└─ README.md

実装詳細
1) index.html

<header> 左上にロゴ（/assets/rogo.webp）。リンク先 https://jpn-travel.com/。ロゴは高さ約48px。

見出し（中央上部）にタイトル文言。

<main> 内にギャラリーコンテナ。app.jsが/photos配下の画像リスト（gallery.json）を読み込み、グリッド描画。

ライトボックスのための<div id="lightbox">と内部要素（画像、前後ボタン、閉じるボタン、キャプション領域）を用意。

メタ：UTF-8、viewport、OG基本タグ（タイトル/説明用意）。

2) styles.css

ベース：余白・フォント・背景色・リンクスタイル。

ヘッダーは固定でなく通常フロー。ロゴは左、タイトルは中央寄せ（小画面では折り返し）。

ギャラリー：CSS Gridで3列（grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 12px;）。

ブレークポイント例：@media (max-width: 1024px) { 2列 }、@media (max-width: 640px) { 1列 }

画像はカード風（角丸、微シャドウ、ホバーでわずかに拡大・シャドウ強調）。

ライトボックス：全画面の半透明オーバーレイ、中央に画像。前後ナビ/閉じるボタン。z-index適切に。

3) app.js

起動時に./photos/gallery.json（後述のビルドスクリプトで出力）をfetch。

取得した配列（各要素は { "src": "photos/xxx.jpg", "w": 1600, "h": 1067, "alt": "filename" } のような形）を元にDOM生成。

<img>にはloading="lazy", decoding="async", width/heightを設定。サムネイルと原寸は同一でOK（簡易版）。余裕があれば/photos/thumbs/生成を利用。

クリックでライトボックスを開く。左右キー、ボタン、スワイプ（任意）で前後移動。ESC/背景クリックで閉じる。

フォーカス管理（開いたら閉じるボタンにフォーカス、閉じたら元のサムネに戻す）。

4) tools/build_gallery.(js or py)

役割：ローカルの画像群から/photosへコピーし、gallery.jsonを生成。

入力ディレクトリ（Windows想定）：

画像元：E:\zenryukyo

ロゴ元：E:\Download\rogo.webp

出力：

./photos/ に画像群をコピー（拡張子 jpg jpeg png webp を対象、サブフォルダも走査可）。

可能ならPillow等でサムネイル ./photos/thumbs/ も作成（長辺1200px程度／任意）。作らない場合は省略。

各画像の寸法（w,h）と相対パスを集計し ./photos/gallery.json を書き出す。

./assets/rogo.webp にロゴをコピー。

設定はスクリプト冒頭の定数で変更可能に。

クロスプラットフォーム考慮は不要（Windows優先）。ただし出力は相対パスでサイトが動くこと。

5) README.md

使い方を記載：

ローカルにリポジトリを作成し、このプロジェクト一式を配置。

tools/build_gallery.(js or py) を実行して /photos と gallery.json を生成（必要なら依存のインストール手順も記載）。

GitHubにプッシュ。

リポジトリ設定でGitHub Pagesを有効化（mainブランチ /root）。

画像を追加したいときは E:\zenryukyo に置いてスクリプト再実行→プッシュ。

ライセンスはMITなど簡易なものを追記してOK。

コンテンツ仕様（ギャラリーJSON）

photos/gallery.json の形式（例）：

[
  { "src": "photos/IMG_0001.jpg", "w": 1600, "h": 1067, "alt": "IMG_0001" },
  { "src": "photos/IMG_0002.jpg", "w": 1600, "h": 1067, "alt": "IMG_0002" }
]


altには拡張子除きのファイル名を自動設定してOK。

仕上がりの見た目（受け入れ基準）

PCで3列、タブレット2列、スマホ1列のグリッド。

スクロールで多数の写真を快適に閲覧できる（遅延読み込みが効く）。

写真クリックで拡大し、ESC/背景クリックで閉じられる。前後移動ができる。

ロゴは左上、クリックで https://jpn-travel.com/ に遷移。

追加のビルドやサーバなしで、GitHub Pagesにアップするとそのまま動く。

以上を満たす実装済みのコード一式を出力してください。コードブロックはファイルごとに分け、ファイルパスの見出し付きで提示してください（index.html、styles.css、app.js、tools/build_gallery.(js or py)、README.md）。
可能なら、Python版スクリプト（Pillowで画像サイズ取得・任意でサムネ生成）の実装を優先してください。